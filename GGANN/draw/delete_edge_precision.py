import matplotlib.pyplot as plt


#  删除某一种FDA边后的分类精度画图（废弃的代码）
FDA_valid_acc = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.98416, 0.98070, 0.98247, 0.98283, 0.98477, 0.98362,
                0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.98097, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                0.98380]

no_ast_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.99000, 0.97725, 0.98247, 0.98283, 0.98477, 0.98362,
                0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                0.98380]


no_ast_test = [0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583, 0.97695,
              0.98196, 0.97519, 0.96322, 0.98733, 0.98883, 0.98284, 0.98399, 0.98627, 0.98496, 0.98020, 0.98654, 0.97624,
              0.98152, 0.98601, 0.96481, 0.95099, 0.98232, 0.98188, 0.96841, 0.96058, 0.98020, 0.97624, 0.98487, 0.98452,
              0.97457, 0.98733, 0.95654, 0.95742, 0.98566, 0.98566, 0.98540, 0.97413, 0.98152]


no_operand_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                    0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.97929, 0.93910, 0.98247, 0.98283, 0.98477, 0.98362,
                    0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                    0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                    0.98380]

no_operand_test= [0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583, 0.97695,
                  0.98196, 0.97519, 0.96322, 0.98733, 0.97941, 0.94343, 0.98399, 0.98627, 0.98496, 0.98020, 0.98654, 0.97633,
                  0.98152, 0.98601, 0.96481, 0.95099, 0.98232, 0.98188, 0.96841, 0.96058, 0.98020, 0.97624, 0.98487, 0.98452,
                  0.97457, 0.98733, 0.95654, 0.95742, 0.98566, 0.98575, 0.98540, 0.97413, 0.98152]

no_last_use_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                     0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.97929, 0.06090, 0.98247, 0.98283, 0.98477, 0.98362,
                     0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                     0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                     0.98380]

no_last_use_test=[0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583, 0.97695,
                  0.98196, 0.97519, 0.96322, 0.98733, 0.97941, 0.05657, 0.98399, 0.98627, 0.98496, 0.98020, 0.98654, 0.97633,
                  0.98152, 0.98601, 0.96481, 0.95099, 0.98232, 0.98188, 0.96841, 0.96058, 0.98020, 0.97624, 0.98487, 0.98452,
                  0.97457, 0.98733, 0.95654, 0.95742, 0.98566, 0.98566, 0.98540, 0.97413, 0.98152]


no_computed_from_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823,
                          0.98584, 0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.97929, 0.05657, 0.98247, 0.98283,
                          0.98477, 0.98362, 0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238,
                          0.96742, 0.95990, 0.97973, 0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751,
                          0.98690, 0.98389, 0.98778, 0.97070, 0.98380]

no_computed_from_test=[0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583,
                       0.97695, 0.98196, 0.97519, 0.96322, 0.98733, 0.97941, 0.05657, 0.98399, 0.98627, 0.98496, 0.98020,
                       0.98654, 0.97633, 0.98152, 0.98601, 0.96481, 0.95099, 0.98232, 0.98188, 0.96841, 0.96058, 0.98020,
                       0.97624, 0.98487, 0.98452, 0.97457, 0.98733, 0.95654, 0.95742, 0.98566, 0.98566, 0.98540, 0.97413,
                       0.98152]

no_return_to_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                      0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.97929, 0.93910, 0.98247, 0.98283, 0.98477, 0.98362,
                      0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.95211, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                      0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                      0.98380]
no_return_to_test=[0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583,
                   0.97695, 0.98196, 0.97519, 0.96322, 0.98733, 0.97941, 0.94343, 0.98399, 0.98627, 0.98496, 0.98020,
                   0.98654, 0.97633, 0.98152, 0.98601, 0.96481, 0.95099, 0.98232, 0.98188, 0.96841, 0.96058, 0.98020,
                   0.97624, 0.98487, 0.98452, 0.97457, 0.98733, 0.95654, 0.95742, 0.98557, 0.98575, 0.98540, 0.97413,
                   0.98152]


no_formal_ArgName_valid = [0.98618, 0.98469, 0.98530, 0.98574, 0.97712, 0.96727, 0.98636, 0.98504, 0.97061, 0.98935,
                           0.98583, 0.97694, 0.98196, 0.97518, 0.96322, 0.98733, 0.97941, 0.94342, 0.98398, 0.98627,
                           0.98495, 0.98020, 0.98653, 0.97633, 0.98152, 0.98601, 0.96480, 0.95099, 0.98231, 0.98187,
                           0.96841, 0.96058, 0.98020, 0.97624, 0.98486, 0.98451, 0.97457, 0.98733, 0.95653, 0.95741,
                           0.98565, 0.98574, 0.98539, 0.97413, 0.98152]

no_formal_ArgName_test=[0.98618, 0.98469, 0.98530, 0.98574, 0.97712, 0.96727, 0.986368, 0.98504, 0.97061, 0.98935,
                        0.98583, 0.97694, 0.98196, 0.97518, 0.96322, 0.98733, 0.97941,  0.94342, 0.98398, 0.98627,
                        0.98495, 0.98020, 0.98653, 0.97633, 0.98152, 0.98601, 0.96480, 0.95099, 0.98231, 0.98187,
                        0.96841, 0.96058, 0.98020, 0.97624, 0.98486, 0.98451, 0.974573, 0.987330, 0.956537, 0.957416,
                        0.985658, 0.985746, 0.985395, 0.974133, 0.981523]

no_call_function_valid = [0.98362, 0.98407, 0.98354, 0.98460, 0.97637, 0.97105, 0.98566, 0.98894, 0.97229, 0.98823, 0.98584,
                          0.97831, 0.98646, 0.97353, 0.96725, 0.98451, 0.97929, 0.97991, 0.98247, 0.98283, 0.98477, 0.98362,
                          0.98593, 0.97415, 0.98177, 0.98610, 0.96495, 0.98008, 0.98495, 0.98238, 0.96742, 0.95990, 0.97973,
                          0.97707, 0.98734, 0.98238, 0.97318, 0.98637, 0.95733, 0.95751, 0.98690, 0.98389, 0.98778, 0.97070,
                          0.98380]

no_call_function_test=[0.98619, 0.98469, 0.98531, 0.98575, 0.97712, 0.96718, 0.98636, 0.98504, 0.97061, 0.98935, 0.98583,
                       0.97695, 0.98196, 0.97519, 0.96322, 0.98733, 0.97941, 0.97730, 0.98399, 0.98627, 0.98496, 0.98020,
                       0.98654, 0.97633, 0.98144, 0.98601, 0.96481, 0.98029, 0.98232, 0.98188, 0.96841, 0.96058, 0.97994,
                       0.97624, 0.98487, 0.98452, 0.97457, 0.98733, 0.95654, 0.95742, 0.98557, 0.98575, 0.98540, 0.97413,
                       0.98152]

def count_average(scores):
    sum = 0
    for score in scores:
        sum += score
    size = len(scores)
    return sum/size

def print_average():
    print("no_ast_valid", count_average(no_ast_valid))
    print("no_operand_valid", count_average(no_operand_valid))
    print("no_last_use_valid", count_average(no_last_use_valid))
    print("no_computed_from_valid", count_average(no_computed_from_valid))
    print("no_return_to_valid", count_average(no_return_to_valid))
    print("no_formal_ArgName_valid ", count_average(no_formal_ArgName_valid))
    print("no_call_function_valid", count_average(no_call_function_valid))


    print("no_ast_test", count_average(no_ast_test))
    print("no_operand_test", count_average(no_operand_test))
    print("no_last_use_test", count_average(no_last_use_test))
    print("no_computed_from_test", count_average(no_computed_from_test))
    print("no_return_to_test", count_average(no_return_to_test))
    print("no_formal_ArgName_test ", count_average(no_formal_ArgName_test))
    print("no_call_function_test", count_average(no_call_function_test))

def get_x(max_x):
    x = []
    for i in range(1, max_x+1):
        x.append(i)
    return x


def draw():
    x = get_x(45)
    #plt.subplot(221)
    plt.plot(x, no_ast_valid, "b:", label='no_ast', linewidth=1, marker='o')
    plt.plot(x, no_operand_valid, "r:", label='no_operand', linewidth=1, marker='^')
    plt.plot(x, no_call_function_valid, "c:", label='no_call_function', linewidth=1, marker="v")
    plt.plot(x, no_last_use_valid, "m:", label='no_last_use', linewidth=1, marker="*")
    plt.plot(x, no_formal_ArgName_valid, "k:", label='no_call_function', linewidth=1, marker="^")
    plt.plot(x, no_computed_from_valid, "y:", label='no_computed_from', linewidth=1, marker="v")
    plt.plot(x, no_return_to_valid, "g:", label='no_return_to', linewidth=1, marker="*")

    plt.xlabel("Algorithm")
    plt.ylabel("Accuracy")
    plt.ylim(0.95, 0.991)
    plt.xlim(0, 45)
    plt.legend()
    plt.grid(True, linestyle="--", color="#C9C9C9", linewidth="1")

    # plt.subplot(222)
    # plt.plot(x, valid_loss, "b:", label="Training period", linewidth=2, marker='o')
    # plt.plot(x, test_loss, "r:", label="Test period", linewidth=2, marker='^')
    # plt.xlabel("Embeddings Dimension")
    # plt.ylabel("Loss")
    # plt.ylim(0.45, 0.55)
    # plt.xlim(180, 360)
    # plt.legend()
    # plt.grid(True, linestyle="--", color="#C9C9C9", linewidth="1")

    plt.show()
    plt.savefig("deleteEdge")


if __name__ == '__main__':
    draw()

